// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "client"
}

generator zod {
  provider    = "zod-prisma"
  output      = "../../shared/src/schemas/prisma"
  modelCase   = "camelCase"
  modelSuffix = "Schema"
  imports     = "../../shared/src/conf"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  /// @zod.coerce
  id          Int       @id @default(autoincrement())
  /// @zod.coerce
  createdAt   DateTime  @default(now())
  /// @zod.coerce
  updatedAt   DateTime?
  /// @zod.min(imports.default.schema.name.min).max(imports.default.schema.name.max).regex(/^[a-zA-Z][a-zA-Z0-9_]*$/, {message: imports.message.invName})
  username    String    @unique
  /// @zod.min(imports.default.schema.password.min).max(imports.default.schema.password.max).regex(/[A-Za-z]/, {message: imports.message.letterRequired}).regex(/[0-9]/, {message: imports.message.digitRequired})
  password    String
  /// @zod.email()
  email       String    @unique
  // inverse side of 1:1 (must be optional)
  profile     Profile?
  // m:n
  roles       Role[]
  // 1:m
  items       Item[]
}

model Profile {
  /// @zod.coerce
  id          Int       @id @default(autoincrement())
  /// @zod.coerce
  createdAt   DateTime  @default(now())
  /// @zod.coerce
  updatedAt   DateTime?
  /// @zod.min(1).max(imports.default.schema.displayName.max)
  name        String
  // owning side of 1:1 (unique)
  username    String    @unique
  user        User      @relation(fields: [username], references: [username], onDelete: Cascade)
}

model Role {
  /// @zod.coerce
  id          Int       @id @default(autoincrement())
  /// @zod.coerce
  createdAt   DateTime  @default(now())
  /// @zod.coerce
  updatedAt   DateTime?
  /// @zod.custom(z.enum(imports.default.roles))
  name        String    @unique
  // m:n
  users       User[]
}

model Item {
  /// @zod.coerce
  id          Int       @id @default(autoincrement())
  /// @zod.coerce
  createdAt   DateTime  @default(now())
  /// @zod.coerce
  updatedAt   DateTime?
  /// @zod.min(imports.default.schema.name.min).max(imports.default.schema.name.max).regex(/^[a-zA-Z][a-zA-Z0-9_]*$/, {message: imports.message.invName})
  name        String
  /// @zod.coerce.nonnegative()
  price       Decimal   @db.Decimal(10, 2)
  // m:1
  username    String
  user        User      @relation(fields: [username], references: [username], onDelete: Cascade)

  @@unique([username, name])
}
